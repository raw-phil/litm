// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type litmConnEvent uint32

const (
	litmConnEventOPEN  litmConnEvent = 0
	litmConnEventCLOSE litmConnEvent = 1
)

type litmConnEventT struct {
	Fd    int64
	Event litmConnEvent
	_     [4]byte
}

type litmErrorCode uint32

const (
	litmErrorCodeWR_CONN_RB_FAIL litmErrorCode = 0
	litmErrorCodeWR_READ_RB_FAIL litmErrorCode = 1
	litmErrorCodeMSG_TOO_BIG     litmErrorCode = 2
)

type litmErrorEventT struct {
	Code        litmErrorCode
	Description [64]uint8
}

type litmReadEventT struct {
	Fd     int64
	Msg    [256]uint8
	MsgLen uint32
	_      [4]byte
}

// loadLitm returns the embedded CollectionSpec for litm.
func loadLitm() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_LitmBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load litm: %w", err)
	}

	return spec, err
}

// loadLitmObjects loads litm and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*litmObjects
//	*litmPrograms
//	*litmMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadLitmObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadLitm()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// litmSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type litmSpecs struct {
	litmProgramSpecs
	litmMapSpecs
}

// litmSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type litmProgramSpecs struct {
	SysEnterAccept *ebpf.ProgramSpec `ebpf:"sys_enter_accept"`
	SysEnterClose  *ebpf.ProgramSpec `ebpf:"sys_enter_close"`
	SysEnterRead   *ebpf.ProgramSpec `ebpf:"sys_enter_read"`
	SysExitAccept  *ebpf.ProgramSpec `ebpf:"sys_exit_accept"`
	SysExitClose   *ebpf.ProgramSpec `ebpf:"sys_exit_close"`
	SysExitRead    *ebpf.ProgramSpec `ebpf:"sys_exit_read"`
}

// litmMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type litmMapSpecs struct {
	ActiveAcceptMap   *ebpf.MapSpec `ebpf:"active_accept_map"`
	ActiveCloseMap    *ebpf.MapSpec `ebpf:"active_close_map"`
	ActiveReadArgsMap *ebpf.MapSpec `ebpf:"active_read_args_map"`
	ConnEventsRb      *ebpf.MapSpec `ebpf:"conn_events_rb"`
	ConnMap           *ebpf.MapSpec `ebpf:"conn_map"`
	ErrorEventsRb     *ebpf.MapSpec `ebpf:"error_events_rb"`
	ReadEventsRb      *ebpf.MapSpec `ebpf:"read_events_rb"`
}

// litmObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadLitmObjects or ebpf.CollectionSpec.LoadAndAssign.
type litmObjects struct {
	litmPrograms
	litmMaps
}

func (o *litmObjects) Close() error {
	return _LitmClose(
		&o.litmPrograms,
		&o.litmMaps,
	)
}

// litmMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadLitmObjects or ebpf.CollectionSpec.LoadAndAssign.
type litmMaps struct {
	ActiveAcceptMap   *ebpf.Map `ebpf:"active_accept_map"`
	ActiveCloseMap    *ebpf.Map `ebpf:"active_close_map"`
	ActiveReadArgsMap *ebpf.Map `ebpf:"active_read_args_map"`
	ConnEventsRb      *ebpf.Map `ebpf:"conn_events_rb"`
	ConnMap           *ebpf.Map `ebpf:"conn_map"`
	ErrorEventsRb     *ebpf.Map `ebpf:"error_events_rb"`
	ReadEventsRb      *ebpf.Map `ebpf:"read_events_rb"`
}

func (m *litmMaps) Close() error {
	return _LitmClose(
		m.ActiveAcceptMap,
		m.ActiveCloseMap,
		m.ActiveReadArgsMap,
		m.ConnEventsRb,
		m.ConnMap,
		m.ErrorEventsRb,
		m.ReadEventsRb,
	)
}

// litmPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadLitmObjects or ebpf.CollectionSpec.LoadAndAssign.
type litmPrograms struct {
	SysEnterAccept *ebpf.Program `ebpf:"sys_enter_accept"`
	SysEnterClose  *ebpf.Program `ebpf:"sys_enter_close"`
	SysEnterRead   *ebpf.Program `ebpf:"sys_enter_read"`
	SysExitAccept  *ebpf.Program `ebpf:"sys_exit_accept"`
	SysExitClose   *ebpf.Program `ebpf:"sys_exit_close"`
	SysExitRead    *ebpf.Program `ebpf:"sys_exit_read"`
}

func (p *litmPrograms) Close() error {
	return _LitmClose(
		p.SysEnterAccept,
		p.SysEnterClose,
		p.SysEnterRead,
		p.SysExitAccept,
		p.SysExitClose,
		p.SysExitRead,
	)
}

func _LitmClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed litm_bpfel.o
var _LitmBytes []byte
